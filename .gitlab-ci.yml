stages:
  - code-check
  - test

image: ${REGISTRY}/debian-node-oracle-docker:latest
variables:
  REGISTRY: registry.${DOMAIN_NAME}

before_script:
  - export project=${CI_PROJECT_NAME//[^[:alnum:]]/}
  - export group=${CI_PROJECT_NAMESPACE//[^[:alnum:]]/}
  - export branch=${CI_BUILD_REF_NAME//[^[:alnum:]]/}
  - export pipelineId=${CI_PIPELINE_ID//[^[:alnum:]]/}

npminstall:
  stage: code-check
  script:
    - echo "Performing code style check..."
    - status_eslint=0
    - exit_status=0
    - npm set progress=false
    - npm config set registry ${NPM_REGISTRY}
    - time npm install eslint babel-eslint --no-optional
    - if npm run lint; then status_eslint=0; else status_eslint=1; fi
    - if [ $status_eslint == 1 ]; then exit_status=1 && echo "esLint errors exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
    - echo "Code style check done successfully"
    - time npm install --no-optional
    - echo "Node Modules Installed"
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/
    - npm audit --json > ./artifacts/${CI_PROJECT_NAME}/vulnerabilities.json || true
    - if npm audit; then status_vulnerabilities=0; else status_vulnerabilities=1; fi
    - if [ $status_vulnerabilities == 1 ]; then export exit_status=1; echo "Dependency vulnerabilities exist"; fi
    - if [ $exit_status == 1 ]; then exit $exit_status; fi
  artifacts:
    expire_in: 2h
    paths:
      - node_modules/
  tags:
    - CEP_RUNNER

loggertest:
  stage: test
  script:
    - echo 'Performing Logger Test'
    - time npm install --no-optional
    - npm run grunt-cover
    - mkdir -p ./artifacts/${CI_PROJECT_NAME}/
    - cp -r coverage ./artifacts/${CI_PROJECT_NAME}/
  artifacts:
    expire_in: 2h
    paths:
      - coverage/
      - artifacts/
  tags:
    - CEP_RUNNER